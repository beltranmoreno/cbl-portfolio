import { client } from './sanity.client'

// Type definitions for Sanity documents
export interface LocalizedString {
  en: string
  es: string
}

export interface LocalizedSlug {
  en: { current: string }
  es: { current: string }
}

export interface PortableTextBlock {
  _type: 'block'
  children: Array<{
    _type: string
    text: string
    marks?: string[]
  }>
  style?: string
  markDefs?: Array<{
    _key: string
    _type: string
  }>
}

export interface LocalizedText {
  en: PortableTextBlock[]
  es: PortableTextBlock[]
}

export interface SanityImage {
  _type: 'image'
  asset: {
    _ref: string
    _type: 'reference'
  }
  hotspot?: any
  metadata?: {
    lqip?: string
    blurhash?: string
    palette?: any
  }
}

export interface ImageAsset {
  _id: string
  _type: 'imageAsset'
  image: SanityImage
  caption: LocalizedString
  medium: 'film-bw' | 'digital-bw'
  filmFormat?: '35mm' | '120' | 'none'
  isFeatured: boolean
  project: {
    _id: string
    title: LocalizedString
    slug: LocalizedSlug
    locations?: string[]
    startYear: number
    endYear?: number
    isOngoing: boolean
  }
  tags?: string[]
  availableAsPrint: boolean
  printProduct?: {
    _ref: string
  }
  order?: number
}

export interface Project {
  _id: string
  _type: 'project'
  title: LocalizedString
  slug: LocalizedSlug
  startYear: number
  endYear?: number
  isOngoing: boolean
  locations?: string[]
  description: LocalizedText
  featuredImage: SanityImage
  primaryMedium: 'film-bw' | 'digital-bw' | 'mixed'
  collaborators?: string[]
  publications?: LocalizedString[]
  isFeatured: boolean
  images: ImageAsset[]
  order?: number
}

export interface Product {
  _id: string
  _type: 'product'
  title: LocalizedString
  slug: LocalizedSlug
  images: SanityImage[]
  description: LocalizedText
  price: number
  stripeProductId?: string
  relatedProject?: {
    _ref: string
  }
  inStock: boolean
  variants?: Array<{
    name: LocalizedString
    price: number
    stripePriceId?: string
    inStock: boolean
  }>
}

export interface SiteSettings {
  _id: string
  _type: 'siteSettings'
  siteName: string
  aboutBio: LocalizedText
  aboutImage?: SanityImage
  contactEmail?: string
  socialLinks?: Array<{
    platform: string
    url: string
  }>
  featuredProjects?: Array<{
    _id: string
    title: LocalizedString
    slug: LocalizedSlug
    startYear: number
    endYear?: number
    isOngoing: boolean
    locations?: string[]
    featuredImage: SanityImage
    description: LocalizedText
  }>
}

// Query functions
export async function getAllProjects(locale: string = 'en'): Promise<Project[]> {
  const query = `*[_type == "project"] | order(order asc) {
    _id,
    _type,
    title,
    slug,
    startYear,
    endYear,
    isOngoing,
    locations,
    description,
    featuredImage,
    primaryMedium,
    collaborators,
    publications,
    isFeatured,
    "images": *[_type == "imageAsset" && references(^._id)] | order(order asc),
    order
  }`

  return client.fetch(query, {}, { next: { revalidate: 3600 } })
}

export async function getProjectBySlug(slug: string, locale: string = 'en'): Promise<Project | null> {
  const query = `*[_type == "project" && slug.${locale}.current == $slug][0] {
    _id,
    _type,
    title,
    slug,
    startYear,
    endYear,
    isOngoing,
    locations,
    description,
    featuredImage,
    primaryMedium,
    collaborators,
    publications,
    isFeatured,
    "images": *[_type == "imageAsset" && references(^._id)] | order(order asc) {
      _id,
      image,
      caption,
      medium,
      filmFormat,
      tags,
      availableAsPrint,
      order
    },
    order
  }`

  return client.fetch(query, { slug }, { next: { revalidate: 3600 } })
}

export async function getFeaturedImages(): Promise<ImageAsset[]> {
  const query = `*[_type == "imageAsset" && isFeatured == true] {
    _id,
    image,
    caption,
    medium,
    filmFormat,
    project->{
      _id,
      title,
      slug,
      locations,
      startYear,
      endYear,
      isOngoing
    }
  }`

  return client.fetch(query, {}, { next: { revalidate: 3600 } })
}

export async function getAllImages(): Promise<ImageAsset[]> {
  const query = `*[_type == "imageAsset"] | order(project->startYear desc, order asc) {
    _id,
    image,
    caption,
    medium,
    filmFormat,
    tags,
    project->{
      _id,
      title,
      slug,
      locations,
      startYear,
      endYear,
      isOngoing
    }
  }`

  return client.fetch(query, {}, { next: { revalidate: 3600 } })
}

export async function getSiteSettings(): Promise<SiteSettings> {
  const query = `*[_type == "siteSettings"][0] {
    _id,
    siteName,
    aboutBio,
    aboutImage,
    contactEmail,
    socialLinks,
    "featuredProjects": featuredProjects[]->  {
      _id,
      title,
      slug,
      startYear,
      endYear,
      isOngoing,
      locations,
      featuredImage,
      description
    }
  }`

  return client.fetch(query, {}, { next: { revalidate: 3600 } })
}

export async function getAllProducts(): Promise<Product[]> {
  const query = `*[_type == "product"] | order(_createdAt desc) {
    _id,
    title,
    slug,
    images,
    description,
    price,
    stripeProductId,
    relatedProject,
    inStock,
    variants
  }`

  return client.fetch(query, {}, { next: { revalidate: 3600 } })
}

export async function getProductBySlug(slug: string, locale: string = 'en'): Promise<Product | null> {
  const query = `*[_type == "product" && slug.${locale}.current == $slug][0] {
    _id,
    title,
    slug,
    images,
    description,
    price,
    stripeProductId,
    relatedProject->{
      _id,
      title,
      slug
    },
    inStock,
    variants
  }`

  return client.fetch(query, { slug }, { next: { revalidate: 3600 } })
}
